@page "/sendMessage"
@using Azure.Messaging.ServiceBus;

@inject IConfiguration Configuration;

<PageTitle>Send Message</PageTitle>

<h1>Send Message</h1>

<input @bind="Message" @bind:event="oninput" />

<button class="btn btn-primary" @onclick="SendMessageAsync">Send Message</button>

@if (@dateNow != null)
{
    <p>Service bus message sent to queue: '@salesQueueName' at @dateNow.ToString()</p>
}

@code {
    DateTime? dateNow;
    string? salesQueueName;
    public string Message { get; set; } = string.Empty;

    private async Task SendMessageAsync()
    {        
        var connectionString = Configuration["ServiceBus:ConnectionString"];
        salesQueueName = Configuration["ServiceBus:SalesQueueName"];

        // Create a ServiceBusClient object using the connection string to the namespace.
        await using var client = new ServiceBusClient(connectionString);

        // Create a ServiceBusSender object by invoking the CreateSender method on the ServiceBusClient object, and specifying the queue name.
        await using ServiceBusSender sender = client.CreateSender(salesQueueName);

        try
        {
            // Create a new message to send to the queue.
            string messageContent = Message;
            var message = new ServiceBusMessage(messageContent);

            // Send the message to the queue.
            await sender.SendMessageAsync(message);
            dateNow = DateTime.Now;
        }
        catch (Exception exception)
        {
            //<div class="alert alert-danger" role="alert">$"{DateTime.Now} :: Exception: {@exception.Message}"</div>
            Console.WriteLine($"{DateTime.Now} :: Exception: {@exception.Message}");
        }
        finally
        {
            Message = string.Empty;

            // Calling DisposeAsync on client types is required to ensure that network
            // resources and other unmanaged objects are properly cleaned up.
            await sender.DisposeAsync();
            await client.DisposeAsync();
        }        
    }
}
